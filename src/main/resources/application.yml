spring:
  datasource:
    generate-unique-name: false
    name: tacocloud
  security:
    user:
      name: buzz
      password: infinity
    oauth2:
      client:
        registration:
          facebook:
            clientId: ENC(K5JOip5MSB+uJu3mGBExQIv7+jVxi3S6lBqak+4QJgHROYB7pivs3WP28sBZg5fdf16KtMHG+scUVDWctzrJoA==)
            clientSecret: ENC(rwg5TbSN9+Hb1NwnAbqiwF9FMQ1V0HANvouthV2aWHiSHHD9CeVWxTGOGsr7ybYbQKPv1SxIU8nuocL03Cc0UI+0VH2prjAPvyM/Jqu8Cq4=)
            scope: email, public_profile
---
jasypt:
  encryptor:
    password: ${SPRING_WEB_APP}

#spring:
#  profiles: prod
#
#  datasource:
#    url: jdbc:mysql://localhost/tacocloud
#    username: tacouser
#    password: tacopassword

logging:
  level:
    tacos: WARN
---

#  using a MySQL database
#spring:
#  datasource:
#    url: jdbc:mysql:/ /localhost/tacocloud
#    username: tacouser
#    password: tacopassword

#Although you’ll need to add the appropriate JDBC driver to the build, you won’t usually need to specify the JDBC driver
#  class—Spring Boot can figure it out from the structure of the database URL. But if there’s a problem, you can try
#  setting the spring.datasource.driver-class-name property like so:
#spring:
#  datasource:
#    url: jdbc:mysql:/ /localhost/tacocloud
#    username: tacouser
#    password: tacopassword
#    driver-class-name: com.mysql.jdbc.Driver

#Maybe explicit data source configuration isn’t your style. Instead, perhaps you’d prefer to configure your data source
#  in the Java Naming and Directory Interface (JNDI) (http://mng.bz/MvEo)
#spring:
#  datasource:
#    jndi-name: java:/comp/env/jdbc/tacoCloudDS

# You can obtain a client ID and secret by creating a new application entry at https://developers.facebook.com/.
#  security:
#    oauth2:
#      client:
#        registration:
#          <oauth2 or openid provider name>:
#            clientId: <client id>
#            clientSecret: <client secret>
#            scope: <comma-separated list of requested scopes>
#--------------------------------------------------------------------------
# One of the most common things you’ll need to do with the underlying container is to set it up to handle HTTPS requests.
# $ keytool -keystore mykeys.jks -genkey -alias tomcat -keyalg RSA
# server:
#  port: 8443
#  ssl:
#    key-store: file:/ / /path/to/mykeys.jks
#    key-store-password: letmein
#    key-password: letmein
#-------------------------------------------------------------------------\
logging:
  file:
    path: src/main/resources
    file: TacoCloud.log
  level:
    root: WARN
    org:
      springframework:
        security: DEBUG

taco:
  orders:
    pageSize: 10

discount:
  codes:
    abcdef: 10